
import javax.swing.JFileChooser;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import javax.swing.UnsupportedLookAndFeelException;
import org.mindswap.pellet.jena.PelletReasonerFactory;
import com.hp.hpl.jena.ontology.OntModel;
import com.hp.hpl.jena.ontology.OntModelSpec;
import com.hp.hpl.jena.rdf.model.Model;
import com.hp.hpl.jena.rdf.model.ModelFactory;
import com.hp.hpl.jena.reasoner.Reasoner;
import com.hp.hpl.jena.reasoner.ValidityReport;
import java.io.BufferedInputStream;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.Iterator;
import java.util.Properties;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFrame;
import javax.swing.UIManager;
import javax.swing.text.Document;

/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * OntoManglerForm.java
 *
 * Created on 29.09.2010, 12:00:00
 */
/**
 *
 * @author sebmate
 */
public class OntoManglerForm extends javax.swing.JFrame {

    private String inputFormat = "";
    private String outputFormat = "";
    private String ontoFile = "";
    private String inferencingLevel = "";
    private OntModel myModel;

    /** Creates new form OntoManglerForm */
    public OntoManglerForm() {
        try {
            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(OntoManglerForm.class.getName()).log(Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            Logger.getLogger(OntoManglerForm.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            Logger.getLogger(OntoManglerForm.class.getName()).log(Level.SEVERE, null, ex);
        } catch (UnsupportedLookAndFeelException ex) {
            Logger.getLogger(OntoManglerForm.class.getName()).log(Level.SEVERE, null, ex);
        }

        initComponents();

    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        buttonGroup3 = new javax.swing.ButtonGroup();
        selectFile = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        rdfxmlSelector = new javax.swing.JRadioButton();
        ntripleSelector = new javax.swing.JRadioButton();
        turtleSelector = new javax.swing.JRadioButton();
        n3Selector = new javax.swing.JRadioButton();
        jLabel3 = new javax.swing.JLabel();
        noneSelector = new javax.swing.JRadioButton();
        rdfsSelector = new javax.swing.JRadioButton();
        owlSelector = new javax.swing.JRadioButton();
        mangleButton = new javax.swing.JButton();
        n3Selector1 = new javax.swing.JRadioButton();
        ntripleSelector1 = new javax.swing.JRadioButton();
        turtleSelector1 = new javax.swing.JRadioButton();
        jLabel4 = new javax.swing.JLabel();
        rdfxmlSelector1 = new javax.swing.JRadioButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        console = new javax.swing.JTextArea();
        saveSettings = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("OntoMangler Tool");
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setLocationByPlatform(true);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
        });

        selectFile.setText("Select Input File");
        selectFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectFileActionPerformed(evt);
            }
        });

        jLabel2.setText("Output Format:");

        buttonGroup1.add(rdfxmlSelector);
        rdfxmlSelector.setText("RDF/XML");
        rdfxmlSelector.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdfxmlSelectorActionPerformed(evt);
            }
        });

        buttonGroup1.add(ntripleSelector);
        ntripleSelector.setText("N-TRIPLE");

        buttonGroup1.add(turtleSelector);
        turtleSelector.setSelected(true);
        turtleSelector.setText("TURTLE");

        buttonGroup1.add(n3Selector);
        n3Selector.setText("N3");

        jLabel3.setText("Apply Inference:");

        buttonGroup2.add(noneSelector);
        noneSelector.setSelected(true);
        noneSelector.setText("None");
        noneSelector.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        buttonGroup2.add(rdfsSelector);
        rdfsSelector.setText("RDFS");
        rdfsSelector.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        buttonGroup2.add(owlSelector);
        owlSelector.setText("OWL");
        owlSelector.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        mangleButton.setText("Convert!");
        mangleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mangleButtonActionPerformed(evt);
            }
        });

        buttonGroup3.add(n3Selector1);
        n3Selector1.setText("N3");

        buttonGroup3.add(ntripleSelector1);
        ntripleSelector1.setText("N-TRIPLE");

        buttonGroup3.add(turtleSelector1);
        turtleSelector1.setText("TURTLE");

        jLabel4.setText("Input Format:");

        buttonGroup3.add(rdfxmlSelector1);
        rdfxmlSelector1.setSelected(true);
        rdfxmlSelector1.setText("RDF/XML");
        rdfxmlSelector1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdfxmlSelector1ActionPerformed(evt);
            }
        });

        console.setColumns(20);
        console.setRows(5);
        jScrollPane1.setViewportView(console);

        saveSettings.setText("Save Settings");
        saveSettings.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveSettingsActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                            .add(saveSettings, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .add(selectFile))
                        .add(41, 41, 41)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jLabel3)
                            .add(jLabel2)
                            .add(jLabel4))
                        .add(18, 18, 18)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(layout.createSequentialGroup()
                                .add(rdfxmlSelector1)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(ntripleSelector1)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(turtleSelector1)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(n3Selector1))
                            .add(layout.createSequentialGroup()
                                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                    .add(rdfxmlSelector)
                                    .add(noneSelector))
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                    .add(ntripleSelector)
                                    .add(rdfsSelector))
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                    .add(layout.createSequentialGroup()
                                        .add(turtleSelector)
                                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                        .add(n3Selector))
                                    .add(owlSelector)))))
                    .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 615, Short.MAX_VALUE)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, mangleButton))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(layout.createSequentialGroup()
                        .add(selectFile)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(saveSettings)
                        .add(18, 18, 18))
                    .add(layout.createSequentialGroup()
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(jLabel4)
                            .add(ntripleSelector1)
                            .add(turtleSelector1)
                            .add(n3Selector1)
                            .add(rdfxmlSelector1))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(jLabel2)
                            .add(ntripleSelector)
                            .add(turtleSelector)
                            .add(n3Selector)
                            .add(rdfxmlSelector))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(jLabel3)
                            .add(noneSelector)
                            .add(rdfsSelector)
                            .add(owlSelector))
                        .add(18, 18, 18)))
                .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 88, Short.MAX_VALUE)
                .add(18, 18, 18)
                .add(mangleButton)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void rdfxmlSelectorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdfxmlSelectorActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_rdfxmlSelectorActionPerformed

    void consoleWrite(String consoleMessage) {
        System.out.println(consoleMessage);
        Document doc = console.getDocument();
        try {
            doc.insertString(doc.getLength(), consoleMessage + "\n", null);
            console.setCaretPosition(console.getText().length());

        } catch (Exception ex) {
            consoleWrite(ex.toString());
        }
    }

    private void selectFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectFileActionPerformed

        JFileChooser chooser = new JFileChooser();
        ExampleFileFilter filter = new ExampleFileFilter();
        filter.addExtension("owl");
        filter.setDescription("OWL Ontologies");
        chooser.setFileFilter(filter);
        int returnVal = chooser.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            ontoFile = chooser.getSelectedFile().getAbsolutePath();
            consoleWrite("File selected: " + ontoFile);
        }


    }//GEN-LAST:event_selectFileActionPerformed

    private void rdfxmlSelector1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdfxmlSelector1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_rdfxmlSelector1ActionPerformed

    private void mangleButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mangleButtonActionPerformed

        getAndSaveConfiguration();

        if (inferencingLevel.equals("NONE")) {
            myModel = ModelFactory.createOntologyModel(OntModelSpec.OWL_DL_MEM);
        }

        if (inferencingLevel.equals("RDFS")) {
            myModel = ModelFactory.createOntologyModel(OntModelSpec.OWL_DL_MEM_RDFS_INF);
        }

        if (inferencingLevel.equals("OWL")) {
            Reasoner reasoner =
                    PelletReasonerFactory.theInstance().create();
            Model infModel = ModelFactory.createInfModel(reasoner, ModelFactory.createDefaultModel());
            myModel = ModelFactory.createOntologyModel(OntModelSpec.OWL_DL_MEM, infModel);
        }

        String inputFile = ontoFile;

        if (inputFile.equals("No file selected!")) {
            consoleWrite("No file selected, aborting!");
            return;
        }

        FileInputStream inputStream = null;
        FileOutputStream outputStream = null;
        String outputFile = inputFile.replace(".owl", "_mangled.owl");

        consoleWrite("Output file is: " + outputFile);


        try {
            inputStream = new FileInputStream(inputFile);
            outputStream = new FileOutputStream(outputFile);
        } catch (FileNotFoundException e) {
            consoleWrite(e + " --- '" + inputFile + "' is an invalid input file.");
            return;
        }

        consoleWrite("Setting up Jena model ...");

        myModel.read(inputStream, null, inputFormat);

        // Validate the file:
        consoleWrite("Validating OWL file ...");

        ValidityReport validityReport = myModel.validate();
        if (validityReport != null && !validityReport.isValid()) {
            Iterator i = validityReport.getReports();
            while (i.hasNext()) {
                consoleWrite(((ValidityReport.Report) i.next()).getDescription());
            }
        }

        consoleWrite("Writing output file ...");

        myModel.write(outputStream, outputFormat);
        try {
            outputStream.close();
        } catch (IOException ex) {
            consoleWrite("Error: could not write file!");
        }
        consoleWrite("Done!\n");



    }//GEN-LAST:event_mangleButtonActionPerformed

    public void loadConfiguration() {

        System.out.println("loadConfiguration() called");

        try {
            System.out.println("loadConfiguration called!");
            BufferedInputStream stream = null;
            Properties properties = new Properties();
            stream = new BufferedInputStream(new FileInputStream("OntoMangler.properties"));
            properties.load(stream);
            stream.close();

            ontoFile = properties.getProperty("ontoFile");
            inputFormat = properties.getProperty("inputFormat");
            outputFormat = properties.getProperty("outputFormat");
            inferencingLevel = properties.getProperty("inferencingLevel");

            consoleWrite("Current file is: " + ontoFile);

            if (inputFormat.equals("RDF/XML")) {
                rdfxmlSelector1.setSelected(true);
            }
            if (inputFormat.equals("N-TRIPLE")) {
                ntripleSelector1.setSelected(true);
            }
            if (inputFormat.equals("TURTLE")) {
                turtleSelector1.setSelected(true);
            }
            if (inputFormat.equals("N3")) {
                n3Selector1.setSelected(true);
            }

            if (outputFormat.equals("RDF/XML")) {
                rdfxmlSelector.setSelected(true);
            }
            if (outputFormat.equals("N-TRIPLE")) {
                ntripleSelector.setSelected(true);
            }
            if (outputFormat.equals("TURTLE")) {
                turtleSelector.setSelected(true);
            }
            if (outputFormat.equals("N3")) {
                n3Selector.setSelected(true);
            }

            if (inferencingLevel.equals("NONE")) {
                noneSelector.setSelected(true);
            }
            if (inferencingLevel.equals("RDFS")) {
                rdfsSelector.setSelected(true);
            }
            if (inferencingLevel.equals("OWL")) {
                owlSelector.setSelected(true);
            }

        } catch (IOException ex) {
            // TODO
        }
    }

    public void getAndSaveConfiguration() {
        try {

            System.out.println("getAndSaveConfiguration called!");

            if (rdfxmlSelector1.isSelected()) {
                inputFormat = "RDF/XML";
            }
            if (ntripleSelector1.isSelected()) {
                inputFormat = "N-TRIPLE";
            }
            if (turtleSelector1.isSelected()) {
                inputFormat = "TURTLE";
            }
            if (n3Selector1.isSelected()) {
                inputFormat = "N3";
            }

            if (rdfxmlSelector.isSelected()) {
                outputFormat = "RDF/XML";
            }
            if (ntripleSelector.isSelected()) {
                outputFormat = "N-TRIPLE";
            }
            if (turtleSelector.isSelected()) {
                outputFormat = "TURTLE";
            }
            if (n3Selector.isSelected()) {
                outputFormat = "N3";
            }

            if (noneSelector.isSelected()) {
                inferencingLevel = "NONE";
            }
            if (rdfsSelector.isSelected()) {
                inferencingLevel = "RDFS";
            }
            if (owlSelector.isSelected()) {
                inferencingLevel = "OWL";
            }

            Properties properties = new Properties();
            properties.setProperty("ontoFile", ontoFile);
            properties.setProperty("inputFormat", inputFormat);
            properties.setProperty("outputFormat", outputFormat);
            properties.setProperty("inferencingLevel", inferencingLevel);

            File propertiesFileFile = new File("OntoMangler.properties");
            properties.store(new FileOutputStream(propertiesFileFile), "OntoExport Properties File");
        } catch (IOException ex) {
            //TODO
        }

    }

    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
    }//GEN-LAST:event_formWindowClosed

    private void saveSettingsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveSettingsActionPerformed
        getAndSaveConfiguration();
    }//GEN-LAST:event_saveSettingsActionPerformed
    /**
     * @param args the command line arguments
     */
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.ButtonGroup buttonGroup3;
    private javax.swing.JTextArea console;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton mangleButton;
    private javax.swing.JRadioButton n3Selector;
    private javax.swing.JRadioButton n3Selector1;
    private javax.swing.JRadioButton noneSelector;
    private javax.swing.JRadioButton ntripleSelector;
    private javax.swing.JRadioButton ntripleSelector1;
    private javax.swing.JRadioButton owlSelector;
    private javax.swing.JRadioButton rdfsSelector;
    private javax.swing.JRadioButton rdfxmlSelector;
    private javax.swing.JRadioButton rdfxmlSelector1;
    private javax.swing.JButton saveSettings;
    private javax.swing.JButton selectFile;
    private javax.swing.JRadioButton turtleSelector;
    private javax.swing.JRadioButton turtleSelector1;
    // End of variables declaration//GEN-END:variables
}

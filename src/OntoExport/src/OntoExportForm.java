
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.io.StringReader;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;
import javax.swing.text.BadLocationException;
import javax.swing.text.Document;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import org.xml.sax.InputSource;

/*
 * ontoExportForm.java
 *
 * Created on 19.08.2010, 08:10:11
 */
/**
 *
 * @author sebmate
 */
public class OntoExportForm extends javax.swing.JFrame {

    //private final ConsoleListener consoleListener;
    private int exportMode = 1;
    private boolean busy;
    OntoExportConfiguration programOptions = null;
    Exporter exporter = new Exporter(this);
    Thread exporterThread;

    /**
     * Creates new form ontoExportForm
     */
    public OntoExportForm() {

        programOptions = new OntoExportConfiguration("OntoExport.properties");
        try {
            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(OntoExportForm.class.getName()).log(Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            Logger.getLogger(OntoExportForm.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            Logger.getLogger(OntoExportForm.class.getName()).log(Level.SEVERE, null, ex);
        } catch (UnsupportedLookAndFeelException ex) {
            Logger.getLogger(OntoExportForm.class.getName()).log(Level.SEVERE, null, ex);
        }

        initComponents();
        loadOptions();

        // maximize the window:
        addWindowListener(new WindowAdapter() {

            @Override
            public void windowOpened(WindowEvent e) {
                setExtendedState(MAXIMIZED_BOTH);
            }
        });

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        putputModeButtonsGroup = new javax.swing.ButtonGroup();
        jScrollPane1 = new javax.swing.JScrollPane();
        console = new javax.swing.JTextArea();
        fileButton = new javax.swing.JButton();
        fileLabel = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        createOntologyCB = new javax.swing.JCheckBox();
        loadFactsCB = new javax.swing.JCheckBox();
        jLabel2 = new javax.swing.JLabel();
        goButton = new javax.swing.JButton();
        inferencingLevelSB = new javax.swing.JComboBox();
        outputModeSB = new javax.swing.JComboBox();
        startClass = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        sqlConsole = new javax.swing.JTextArea();
        jdbc = new javax.swing.JCheckBox();
        stopOnError = new javax.swing.JCheckBox();
        databaseStatus = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("OntoExport");
        setForeground(java.awt.Color.gray);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        console.setBackground(new java.awt.Color(0, 0, 0));
        console.setColumns(20);
        console.setEditable(false);
        console.setFont(new java.awt.Font("Courier New", 1, 14)); // NOI18N
        console.setForeground(new java.awt.Color(0, 255, 0));
        console.setLineWrap(true);
        console.setRows(5);
        jScrollPane1.setViewportView(console);

        fileButton.setText("Select Input File");
        fileButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fileButtonActionPerformed(evt);
            }
        });

        fileLabel.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        fileLabel.setText("No file selected!");

        jLabel1.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        jLabel1.setText("Output format:");
        jLabel1.setEnabled(false);

        createOntologyCB.setSelected(true);
        createOntologyCB.setText("Metadata");
        createOntologyCB.setEnabled(false);
        createOntologyCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createOntologyCBActionPerformed(evt);
            }
        });

        loadFactsCB.setText("Facts");
        loadFactsCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadFactsCBActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        jLabel2.setText("Export targets:");

        goButton.setFont(new java.awt.Font("Lucida Grande", 1, 18)); // NOI18N
        goButton.setForeground(new java.awt.Color(204, 0, 0));
        goButton.setText("Start");
        goButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                goButtonActionPerformed(evt);
            }
        });

        inferencingLevelSB.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "None", "RDFS", "OWL-DL" }));
        inferencingLevelSB.setEnabled(false);
        inferencingLevelSB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inferencingLevelSBActionPerformed(evt);
            }
        });

        outputModeSB.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Direct i2b2 Import", "Create i2b2 SQL", "Create CSV Table (EAV)", "Create CSV Table (Sparse)" }));
        outputModeSB.setEnabled(false);
        outputModeSB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                outputModeSBActionPerformed(evt);
            }
        });

        startClass.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startClassActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        jLabel3.setText("Inferencing level:");
        jLabel3.setEnabled(false);

        jLabel4.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        jLabel4.setText("Root class:");

        jLabel5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/logo_klinikum.gif"))); // NOI18N

        sqlConsole.setBackground(new java.awt.Color(0, 0, 0));
        sqlConsole.setColumns(20);
        sqlConsole.setFont(new java.awt.Font("Courier New", 1, 14)); // NOI18N
        sqlConsole.setForeground(new java.awt.Color(0, 255, 0));
        sqlConsole.setLineWrap(true);
        sqlConsole.setRows(5);
        jScrollPane2.setViewportView(sqlConsole);

        jdbc.setText("Direct JDBC database access");
        jdbc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jdbcActionPerformed(evt);
            }
        });

        stopOnError.setText("Stop on SQL error");
        stopOnError.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stopOnErrorActionPerformed(evt);
            }
        });

        databaseStatus.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        databaseStatus.setText("Database status will be displayed here");

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, jLabel5)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(layout.createSequentialGroup()
                                .add(fileButton)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                                .add(fileLabel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 568, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                    .add(layout.createSequentialGroup()
                                        .add(jLabel2)
                                        .add(18, 18, 18)
                                        .add(createOntologyCB)
                                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                        .add(loadFactsCB)
                                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                        .add(jdbc)
                                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                        .add(stopOnError)
                                        .add(18, 18, 18)
                                        .add(databaseStatus))
                                    .add(layout.createSequentialGroup()
                                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                            .add(jLabel4)
                                            .add(startClass, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 306, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                                        .add(7, 7, 7)
                                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                            .add(outputModeSB, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 175, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                            .add(jLabel1))
                                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                            .add(jLabel3)
                                            .add(inferencingLevelSB, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))))
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 139, Short.MAX_VALUE)
                                .add(goButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 100, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .add(27, 27, 27))
                            .add(jScrollPane2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 1009, Short.MAX_VALUE)
                            .add(org.jdesktop.layout.GroupLayout.TRAILING, jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 1009, Short.MAX_VALUE))
                        .addContainerGap())))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .addContainerGap()
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(fileButton)
                            .add(fileLabel)))
                    .add(jLabel5))
                .add(1, 1, 1)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(layout.createSequentialGroup()
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(jLabel4)
                            .add(jLabel1)
                            .add(jLabel3))
                        .add(8, 8, 8)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(startClass, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(outputModeSB, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(inferencingLevelSB, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .add(10, 10, 10)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(jLabel2)
                            .add(createOntologyCB)
                            .add(loadFactsCB)
                            .add(jdbc)
                            .add(stopOnError)
                            .add(databaseStatus)))
                    .add(goButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 48, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(18, 18, 18)
                .add(jScrollPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 202, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(18, 18, 18)
                .add(jScrollPane2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 127, Short.MAX_VALUE)
                .addContainerGap())
        );

        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        setBounds((screenSize.width-1045)/2, (screenSize.height-557)/2, 1045, 557);
    }// </editor-fold>//GEN-END:initComponents

    private void fileButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fileButtonActionPerformed

        JFileChooser chooser = new JFileChooser();

        ExampleFileFilter filter = new ExampleFileFilter();
        filter.addExtension("owl");
        filter.setDescription("OWL Ontologies");
        chooser.setFileFilter(filter);
        int returnVal = chooser.showOpenDialog(this);

        /*
         * if (returnVal == JFileChooser.APPROVE_OPTION) {
         * consoleWrite(chooser.getSelectedFile().getAbsolutePath()); }
         */

        fileLabel.setText(chooser.getSelectedFile().getAbsolutePath());

        updateOptions();

    }//GEN-LAST:event_fileButtonActionPerformed

    private void loadFactsCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadFactsCBActionPerformed
        updateOptions();
    }//GEN-LAST:event_loadFactsCBActionPerformed

    private void startClassActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startClassActionPerformed
        updateOptions();
    }//GEN-LAST:event_startClassActionPerformed

    private void goButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_goButtonActionPerformed

        updateOptions();

        if (goButton.getText().equals("Start")) {

            // Start export thread:

            goButton.setText("Stop");

            exporter.setConfig(programOptions);

            switch (programOptions.outputMode) {
                case 0:
                    consoleWrite("Starting Direct i2b2 Import ...");
                    exporterThread = new Thread(exporter);
                    exporterThread.start();
                    break;
                case 1:
                    consoleWrite("Starting Create i2b2 SQL File ...");
                    break;
                case 2:
                    consoleWrite("Starting Create CSV File (EAV Table) ...");
                    break;
                case 3:
                    consoleWrite("Starting Create CSV File (Sparse Table) ...");
                    break;
                default:
                    consoleWrite("Error: unknown setting for outputModeSB!");
            }

            this.busy = false;

        } else {

            // Stop export thread:

            exporterThread.stop();
            goButton.setText("Start");

        }
    }//GEN-LAST:event_goButtonActionPerformed

    private void inferencingLevelSBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inferencingLevelSBActionPerformed
    }//GEN-LAST:event_inferencingLevelSBActionPerformed

    private void outputModeSBFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_outputModeSBFocusLost
        //updateOptions();
    }//GEN-LAST:event_outputModeSBFocusLost

    private void inferencingLevelSBFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_inferencingLevelSBFocusLost
        //updateOptions();
    }//GEN-LAST:event_inferencingLevelSBFocusLost

    private void okButton1ActionPerformed(java.awt.event.ActionEvent evt){//GEN-FIRST:okButton1ActionPerformed
        //updateOptions();
    }//GEN-LAST:okButton1ActionPerformed

    private void outputModeSBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBox2ActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        System.out.println("Closing Window");
        updateOptions();
    }//GEN-LAST:event_formWindowClosing

    private void jdbcActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jdbcActionPerformed
        updateOptions();
    }//GEN-LAST:event_jdbcActionPerformed

    private void createOntologyCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createOntologyCBActionPerformed
        updateOptions();
}//GEN-LAST:event_createOntologyCBActionPerformed

    private void stopOnErrorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stopOnErrorActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_stopOnErrorActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea console;
    private javax.swing.JCheckBox createOntologyCB;
    private javax.swing.JLabel databaseStatus;
    private javax.swing.JButton fileButton;
    private javax.swing.JLabel fileLabel;
    private javax.swing.JButton goButton;
    private javax.swing.JComboBox inferencingLevelSB;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JCheckBox jdbc;
    private javax.swing.JCheckBox loadFactsCB;
    private javax.swing.JComboBox outputModeSB;
    private javax.swing.ButtonGroup putputModeButtonsGroup;
    private javax.swing.JTextArea sqlConsole;
    private javax.swing.JTextField startClass;
    private javax.swing.JCheckBox stopOnError;
    // End of variables declaration//GEN-END:variables

    void consoleWrite(String consoleMessage) {
        //System.out.println("doConsoleWrite: " + consoleMessage);
        Document doc = console.getDocument();
        try {
            doc.insertString(doc.getLength(), consoleMessage + "\n", null);
            console.setCaretPosition(console.getText().length());

        } catch (Exception ex) {
            System.out.println(ex);
        }
    }

    void sqlConsoleWrite(String consoleMessage) {
        //System.out.println("doConsoleWrite: " + consoleMessage);
        Document doc = sqlConsole.getDocument();
        try {
            doc.insertString(doc.getLength(), consoleMessage + "\n\n", null);
            sqlConsole.setCaretPosition(sqlConsole.getText().length());

        } catch (Exception ex) {
            System.out.println(ex);
        }
    }

    int getExportMode() {
        return exportMode;
    }

    void setDatabaseStatus(String status) {
        databaseStatus.setText(status);
    }

    void setInfo(String consoleMessage) {
        startClass.setText(consoleMessage);
    }

    private void updateOptions() {
        programOptions.ontologyFile = fileLabel.getText();
        programOptions.rootClass = startClass.getText();
        programOptions.inferencingLevel = inferencingLevelSB.getSelectedIndex();
        programOptions.outputMode = outputModeSB.getSelectedIndex();
        programOptions.createOntology = createOntologyCB.isSelected();
        programOptions.loadFacts = loadFactsCB.isSelected();
        programOptions.jdbc = jdbc.isSelected();
        programOptions.saveConfiguration();
        programOptions.stopOnError = stopOnError.isSelected();

    }

    private void loadOptions() {
        programOptions.loadConfiguration();
        fileLabel.setText(programOptions.ontologyFile);
        startClass.setText(programOptions.rootClass);
        inferencingLevelSB.setSelectedIndex(programOptions.inferencingLevel);
        outputModeSB.setSelectedIndex(programOptions.outputMode);
        createOntologyCB.setSelected(programOptions.createOntology);
        loadFactsCB.setSelected(programOptions.loadFacts);
        jdbc.setSelected(programOptions.jdbc);

    }

    void exportFinished() {
        goButton.setText("Start");
    }

    void sqlConsoleFixToMSSQL() {

        Document doc = sqlConsole.getDocument();

        String MSSQL = "";
        try {
            MSSQL = doc.getText(0, doc.getLength());
            doc.remove(0, doc.getLength());
        } catch (BadLocationException ex) {
            Logger.getLogger(OntoExportForm.class.getName()).log(Level.SEVERE, null, ex);
        }

        MSSQL = MSSQL.replaceAll("SYSDATETIME", "GETDATE");
       
        try {
            doc.insertString(doc.getLength(), MSSQL, null);
            console.setCaretPosition(console.getText().length());

        } catch (Exception ex) {
            System.out.println(ex);
        }

    }
}
